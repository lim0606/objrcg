CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")

FIND_PACKAGE(Torch REQUIRED)
FIND_PACKAGE(CUDA 6.5 REQUIRED)

## Flags
## When using MSVC
#IF(MSVC)
#  # we want to respect the standard, and we are bored of those **** .
#  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE=1)
#ENDIF(MSVC)
#
#IF (CMAKE_VERSION VERSION_LESS "3.1")
#  SET(CMAKE_C_FLAGS "-std=c99 ${CMAKE_C_FLAGS}")
#ELSE ()
#  SET(CMAKE_C_STANDARD 99)
#ENDIF ()
#
## OpenMP support?
#SET(WITH_OPENMP ON CACHE BOOL "OpenMP support if available?")
#IF (APPLE AND CMAKE_COMPILER_IS_GNUCC)
#  EXEC_PROGRAM (uname ARGS -v  OUTPUT_VARIABLE DARWIN_VERSION)
#  STRING (REGEX MATCH "[0-9]+" DARWIN_VERSION ${DARWIN_VERSION})
#  MESSAGE (STATUS "MAC OS Darwin Version: ${DARWIN_VERSION}")
#  IF (DARWIN_VERSION GREATER 9)
#    SET(APPLE_OPENMP_SUCKS 1)
#  ENDIF (DARWIN_VERSION GREATER 9)
#  EXECUTE_PROCESS (COMMAND ${CMAKE_C_COMPILER} -dumpversion
#    OUTPUT_VARIABLE GCC_VERSION)
#  IF (APPLE_OPENMP_SUCKS AND GCC_VERSION VERSION_LESS 4.6.2)
#    MESSAGE(STATUS "Warning: Disabling OpenMP (unstable with this version of GCC)")
#    MESSAGE(STATUS " Install GCC >= 4.6.2 or change your OS to enable OpenMP")
#    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unknown-pragmas")
#    SET(WITH_OPENMP OFF CACHE BOOL "OpenMP support if available?" FORCE)
#  ENDIF ()
#ENDIF ()
#
#IF (WITH_OPENMP)
#  FIND_PACKAGE(OpenMP)
#  IF(OPENMP_FOUND)
#    MESSAGE(STATUS "Compiling with OpenMP support")
#    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
#    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
#  ENDIF(OPENMP_FOUND)
#ENDIF (WITH_OPENMP)

# Detect CUDA architecture and get best NVCC flags
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCudaArch.cmake)
SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA)
LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})

INCLUDE_DIRECTORIES("${Torch_INSTALL_INCLUDE}/THC")
LINK_DIRECTORIES("${Torch_INSTALL_LIB}")

############## lua
FILE(GLOB luasrc *.lua)

############## cu
FILE(GLOB src-cuda *.cu)
CUDA_ADD_LIBRARY(objrcg MODULE ${src-cuda})

############## c
#FILE(GLOB src *.c)
#ADD_LIBRARY(objrcg MODULE ${src})

############## 
TARGET_LINK_LIBRARIES(objrcg luaT THC TH)
IF(APPLE)
  SET_TARGET_PROPERTIES(objrcg PROPERTIES
    LINK_FLAGS "-undefined dynamic_lookup")
ENDIF()

IF(APPLE)
  SET_TARGET_PROPERTIES(objrcg PROPERTIES
    LINK_FLAGS "-undefined dynamic_lookup")
ENDIF()

### Torch packages supposes libraries prefix is "lib"
SET_TARGET_PROPERTIES(objrcg PROPERTIES
  PREFIX "lib"
  IMPORT_PREFIX "lib")

INSTALL(TARGETS objrcg
  RUNTIME DESTINATION "${Torch_INSTALL_LUA_CPATH_SUBDIR}"
  LIBRARY DESTINATION "${Torch_INSTALL_LUA_CPATH_SUBDIR}")

INSTALL(
  FILES
  ${luasrc}
  DESTINATION "${Torch_INSTALL_LUA_PATH_SUBDIR}/objrcg")
